package com.kelsonprime.trafficshape;

import java.util.*;

import org.jnetpcap.Pcap;
import org.jnetpcap.PcapIf;
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Tcp;

/**
 * Here is the output generated by this example : 
 *
 *  Network devices found: 
 *  #0: \Device\NPF_{BC81C4FC-242F-4F1C-9DAD-EA9523CC992D} [Intel(R) PRO/100 VE]  
 *  #1: \Device\NPF_{E048DA7F-D007-4EEF-909D-4238F6344971} [VMware Virtual Ethernet Adapter] 
 *  #2: \Device\NPF_{5B62B373-3EC1-460D-8C71-54AA0BF761C7} [VMware Virtual Ethernet Adapter] 
 *  #3: \Device\NPF_GenericDialupAdapter [Adapter for generic dialup and VPN capture] 
 *
 *  Choosing 'Intel(R) PRO/100 VE) ' on your behalf: 
 *  Received packet at Tue Nov 03 18:52:42 EST 2009 caplen=1362 len=1362 jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=82   len=82   jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=145  len=145  jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=62   len=62   jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=164  len=164  jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=62   len=62   jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=54   len=54   jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=1073 len=1073 jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=1514 len=1514 jNetPcap rocks! 
 *  Received packet at Tue Nov 03 18:52:45 EST 2009 caplen=279  len=279  jNetPcap rocks! 
 */
public class PCap {


    final static Map<String, Integer> sizeMap = new HashMap<String, Integer>();
    final static Map<String, Integer> destMap = new HashMap<String, Integer>();
    final static Map<String, Integer> sourceMap = new HashMap<String, Integer>();
    static int packetCount;
    static int packetPerSecond;
    static int[] packetCountArr;
    static int packetCountArrInd;

    final static Map<Integer, Integer> TCPwindowSizeTotalMap = new HashMap<Integer, Integer>();
    final static Map<Integer, Integer> TCPnumPacketsMap = new HashMap<Integer, Integer>();

    final static int SIZE_THRESHOLD = 100;//average size of packet before we get suspicious.
    final static int PACKET_NUM_THRES = 1000;

    /**
     * Main startup method 
     *
     * @param args
     *          ignored 
     */
    public static void main(String[] args) {
        List<PcapIf> alldevs = new ArrayList<PcapIf>(); // Will be filled with NICs  
        StringBuilder errbuf = new StringBuilder(); // For any error msgs
        final List<PcapPacket> packets = new ArrayList<PcapPacket>();
        packetCount = 0;
        packetCountArr = new int[10];

        /*************************************************************************** 
         * First get a list of devices on this system 
         **************************************************************************/
        int r = Pcap.findAllDevs(alldevs, errbuf);
        if (r == Pcap.NOT_OK || alldevs.isEmpty()) {
            System.err.printf("Can't read list of devices, error is %s", errbuf
                    .toString());
            return;
        }

        System.out.println("Network devices found:");

        int i = 0;
        for (PcapIf device : alldevs) {
            String description =
                    (device.getDescription() != null) ? device.getDescription()
                            : "No description available";
            System.out.printf("#%d: %s [%s]\n", i++, device.getName(), description);
        }

        PcapIf device = alldevs.get(1); // We know we have atleast 1 device
        System.out
                .printf("\nChoosing '%s' on your behalf:\n",
                        (device.getDescription() != null) ? device.getDescription()
                                : device.getName());

        /*************************************************************************** 
         * Second we open up the selected device 
         **************************************************************************/
        int snaplen = 64 * 1024;           // Capture all packets, no trucation  
        int flags = Pcap.MODE_PROMISCUOUS; // capture all packets  
        int timeout = 10 * 1000;           // 10 seconds in millis  
        Pcap pcap =
                Pcap.openLive(device.getName(), snaplen, flags, timeout, errbuf);

        if (pcap == null) {
            System.err.printf("Error while opening device for capture: "
                    + errbuf.toString());
            return;
        }

        final TC tc = new TC("wlan0");

        Timer timer = new Timer();

        timer.schedule( new TimerTask() {
            public void run() {
                if (!packetCounter()) {
//                    tc.up();
                     System.out.println("THROTTLE MOAR INTERWEBZ");
                }
            }
        }, 0, 1000);

        /*************************************************************************** 
         * Third we create a packet handler which will receive packets from the 
         * libpcap loop. 
         **************************************************************************/
        PcapPacketHandler<String> jpacketHandler = new PcapPacketHandler<String>() {

            public void nextPacket(PcapPacket packet, String user) {

                System.out.printf("Received packet at %s caplen=%-4d len=%-4d %s\n",
                        new Date(packet.getCaptureHeader().timestampInMillis()),
                        packet.getCaptureHeader().caplen(),  // Length actually captured
                        packet.getCaptureHeader().wirelen(), // Original length
                        user                                 // User supplied object
                );
                packets.add(packet);

                packetCount++;

                System.out.println("Packets per second: " + packetPerSecond);

                if (!packetSizeChecking(packet)) {
                    System.out.println("Throttling INTERWEBZ");
//                    tc.up();
                }
                packetSizeChecking(packet);
                System.out.println(getTopTrafficHosts());

            }
        };

        /*************************************************************************** 
         * Fourth we enter the loop and tell it to capture 10 packets. The loop 
         * method does a mapping of pcap.datalink() DLT value to JProtocol ID, which 
         * is needed by JScanner. The scanner scans the packet buffer and decodes 
         * the headers. The mapping is done automatically, although a variation on 
         * the loop method exists that allows the programmer to sepecify exactly 
         * which protocol ID to use as the data link type for this pcap interface. 
         **************************************************************************/
        pcap.loop(Pcap.LOOP_INFINITE, jpacketHandler, "jNetPcap rocks!");

        /*************************************************************************** 
         * Last thing to do is close the pcap handle 
         **************************************************************************/
        pcap.close();
    }

    public static boolean packetSizeChecking(PcapPacket packet) {
        //handling of packet size
        //sizeMap maps the destination of a packet to the total size of packets at that place.
        //destMap maps the destination of a packet to the total number of packets at that place.
        //sourceMap maps the source to the total size of packets coming from that source.
        //I'm assuming that we're looking at the average packet size per destination, not
        //the average packet size overall.
        //this probably could have been done better.
        Ip4 ip = packet.getHeader(new Ip4());
        if (null != ip) {
            String destination = toIp(ip.destination());
            if (sizeMap.containsKey(destination)) {
                sizeMap.put(destination, sizeMap.get(destination) + packet.getTotalSize());
                destMap.put(destination, destMap.get(destination) + 1);
            }
            else {
                sizeMap.put(destination, packet.getTotalSize());
                destMap.put(destination, 1);
            }

            String source = toIp(ip.source());
            if (sourceMap.containsKey(source)) {
                sourceMap.put(source, sourceMap.get(source) + packet.getTotalSize());
            } else {
                sourceMap.put(source, packet.getTotalSize());
            }
        }

        for (String key : sizeMap.keySet()) {
            if (sizeMap.get(key) / destMap.get(key) > SIZE_THRESHOLD) {
                //do something, the average packet is too big.
                return false;//action needed
            }
        }
        return true;//no action needed
    }

    public static Map<String, Integer> getTopTrafficHosts() {
        SortedSet<String> keys = new TreeSet<String>(sourceMap.keySet());
        Map<String, Integer> sortedMap = new TreeMap<String, Integer>();
        for (String key : keys) {
            sortedMap.put(key, sourceMap.get(key));
            if (sortedMap.size() >= 5) {
                return sortedMap;
            }

        }
        return sortedMap;
    }

    public static boolean packetCounter() {
        packetCountArr[packetCountArrInd] = packetCount;
        packetCount = 0;
        packetCountArrInd = (packetCountArrInd + 1) % 10;

        float averageCount;
        int temp = 0;
        for (int ii = 0; ii < packetCountArr.length; ii++) {
            temp += packetCountArr[ii];
        }

        averageCount = temp / 10;

        return averageCount > PACKET_NUM_THRES;
    }

    public static boolean windowSizeCheck(PcapPacket packet) {

        Tcp tcp = new Tcp();
        if (packet.hasHeader(tcp))
        {
            int dest = tcp.destination();
            if (TCPwindowSizeTotalMap.containsKey(dest))
            {
                TCPwindowSizeTotalMap.put(dest, TCPwindowSizeTotalMap.get(dest) + tcp.window());
                TCPnumPacketsMap.put(dest, TCPnumPacketsMap.get(dest) + 1);
            }
            else
            {
                TCPwindowSizeTotalMap.put(dest, tcp.window());
                TCPnumPacketsMap.put(dest, 1);
            }
        }
        return true;
    }

    public static String toIp(byte[] array) {
        String retVal = "";
        for (byte item : array) {
            Integer num = Integer.valueOf(item);
            retVal += ((num < 0) ? num + 256 : num) + ".";
        }
        retVal = retVal.substring(0, retVal.length()-1);
        return retVal;
    }
}  
